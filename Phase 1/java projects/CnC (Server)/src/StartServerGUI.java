
/**
 *    Ασφάλεια Δικτύων Υπολογιστών & Τεχνολογίες Προστασίας της Ιδιωτικότητας
 *                                   Άσκηση 1
 * Δημιουργία ασφαλούς διαύλου διαχείρισης botnet (C&C) με χρήση IPsec & TLS/SSL πρωτοκόλλων.
 * 
 *                      Πέππας Κωνσταντίνος 321/2011134
 *                      Σωτηρέλης Χρήστος   321/2012182
 *                      Χαϊκάλης Νικόλαος   321/2012200
 * 
 */

import java.io.IOException;
import java.io.ObjectOutputStream;
import static java.lang.Thread.sleep;
import java.security.KeyManagementException;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.net.ssl.KeyManagerFactory;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLServerSocket;
import javax.net.ssl.SSLSocket;
import javax.net.ssl.TrustManagerFactory;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

public class StartServerGUI extends javax.swing.JFrame{

    private ArrayList<ChatWithBots> Bots = new ArrayList();//Bots ta opoia exun kanei Aitisi na bun ston server.
    private ArrayList<ObjectOutputStream> Bots1 = new ArrayList();//Krataw ta OOS twn BOTS gia na tus stlenw minimata.
    private ChatWithBotMaster BotMaster = new ChatWithBotMaster();
    
    private boolean MasterIsHere;
    /**
     * Creates new form GUI
     */
    public StartServerGUI() {
        initComponents();
        setVisible(true);
        setLocationRelativeTo(null);
        setTitle("C&C Server");
        setResizable(false);
        Master_Text.setEditable(false); 
        Bot_Text.setEditable(false); 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Label_BotMaster_infos = new javax.swing.JLabel();
        Master_Port = new javax.swing.JTextField();
        Label_BotMaster_infos1 = new javax.swing.JLabel();
        Bot_Port = new javax.swing.JTextField();
        Start = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Master_Text = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        Bot_Text = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Label_BotMaster_infos.setText("BotMaster port: ");

        Master_Port.setText("5555");

        Label_BotMaster_infos1.setText("Bot port: ");

        Bot_Port.setText("4444");

        Start.setText("Start");
        Start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartActionPerformed(evt);
            }
        });

        Master_Text.setColumns(20);
        Master_Text.setRows(5);
        jScrollPane1.setViewportView(Master_Text);

        Bot_Text.setColumns(20);
        Bot_Text.setRows(5);
        jScrollPane2.setViewportView(Bot_Text);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Label_BotMaster_infos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Master_Port, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Start)
                .addGap(96, 96, 96)
                .addComponent(Label_BotMaster_infos1, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Bot_Port, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Label_BotMaster_infos, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Label_BotMaster_infos1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Master_Port, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Start)
                    .addComponent(Bot_Port, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 394, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void StartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartActionPerformed

        /**
         * Arxika checkarw an kapoio apo ta JText einai kena, an kapoio einai
         * keno tote ksanazitaw ekneou ta stoixeia.
         * Stin synexeia checkarw an ta port pou ehei dwsei o xristsis einai
         * diaforetika an einai diaforetika tote dn ipraxei provlima.
         * Meta checkarw an kapoio apo ta dio port isoutai me to 5221 pou einai
         * to port pou tha to xrisimopoiisume gia to OpenSSL stin synexia.
         */
        if(Bot_Port.getText().isEmpty() || Bot_Port.getText().isEmpty()){
            final JPanel panel = new JPanel();
            JOptionPane.showMessageDialog(panel, "Some fields are empty", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        else if(Master_Port.getText().toString().equals(Bot_Port.getText().toString())){
            final JPanel panel = new JPanel();
            JOptionPane.showMessageDialog(panel, "Give different ports", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        else if(Master_Port.getText().toString().equals("5221") || Bot_Port.getText().toString().equals("5221")){
            final JPanel panel = new JPanel();
            JOptionPane.showMessageDialog(panel, "5221 is already used by OpenSSL.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        Start.setEnabled(false);
        Master_Port.setEnabled(false);
        Bot_Port.setEnabled(false);
        /**
         * Apothikeuw tis times pou mu edwse o admin tou C&C k kalw tous antistixous Constructors
         * gia na ksekinisoun na trexoun oi 2 server.
         */
        int MasterPort = Integer.parseInt(Master_Port.getText().toString());
        int BotPort = Integer.parseInt(Bot_Port.getText().toString());
 
        //Ksekinaw ton BotMaster Server:
        StartMastserServer(MasterPort);
        //Ksekinaw ton Server gia ta Bots:
        StartBotServer(BotPort); 
    }//GEN-LAST:event_StartActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StartServerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StartServerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StartServerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StartServerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StartServerGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Bot_Port;
    private javax.swing.JTextArea Bot_Text;
    private javax.swing.JLabel Label_BotMaster_infos;
    private javax.swing.JLabel Label_BotMaster_infos1;
    private javax.swing.JTextField Master_Port;
    private javax.swing.JTextArea Master_Text;
    private javax.swing.JButton Start;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables

    private void StartMastserServer(int port){
        /**
         * Anoigw ton server pou epitrepei tin epikoinwnia tou C&C Server me ton
         * BotMaster. Tin epikoinwnia auti tin anoigw se ena neo Thread gt 
         * tautoxrona me auti thelw na anoiksw k tin epikoinwnia tou C&C Server
         * me ta bots (multithread Server)
         */  
        Thread BotMaster_Thread = new Thread(() -> {
            boolean flag = false;
            BotMaster = new ChatWithBotMaster();
            ArrayList<Bot_Properties> onlineList = new ArrayList();
            ArrayList<Bot_Properties> tmpList = new ArrayList();
            while(true){
                if(flag == false){
                    try {
                        BotMaster = new ChatWithBotMaster(port, Master_Text);
                        BotMaster.Start_Connection();
//                        System.out.println(flag);
                        flag = BotMaster.keepWalking();
                        sleep(1000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(StartServerGUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                if(!Bots.isEmpty()){
                    onlineList = OnlineBots();
                    if(!onlineList.equals(tmpList)){
                        tmpList = onlineList;
                        BotMaster.sendBotList(onlineList);
//                        System.out.println("Bots" + Bots1.get(0));
                        BotMaster.setBots(Bots1);//stlenw stin calss ChatWithBotMaster tin lista me ta OOS gia na stilei Global msg sta bots.
                    }
                }
                flag = BotMaster.keepWalking();
                System.out.print("");

            }
        });
        BotMaster_Thread.start();                
    }
    
    private void StartBotServer(int port){
        SSLServerSocket botsServer ;
//        System.out.println("Waiting for BOTS");
        Bot_Text.append("Waiting for Bots\n");
        Thread Bots_Thread = new Thread(() -> {
            while(true){
                SSLSocket client = null;
                //System.setProperty("javax.net.debug", "ssl:record");
                Certificates ca = new Certificates("Server");
                TrustManagerFactory trustManager = ca.FindCaKey();
                KeyManagerFactory serverKeyManager = ca.FindPubKey();
                client = CreateSSLsock(serverKeyManager, trustManager, port);
                ChatWithBots newBot = new ChatWithBots(client, Bot_Text);
                newBot.setSSLSocket(client);
                newBot.start();
                Thread newClient = new Thread(() -> {
                    while(true){
                        boolean check = newBot.NewClientAdded();
                        System.out.print("");
                        if(check){
                            Bots.add(newBot);
//                            System.out.println("bot OOS:" + newBot.getCurBot().getOos());
                            Bots1.add(newBot.getCurBot().getOos());
                            OnlineBots();
                            //System.out.println("newBot:"+Bots.get(Bots.size()-1).getCurBot().getSocket() + Bots.get(Bots.size()-1).getCurBot().getBotPCname());
                            break;
                        }
                    }
                });
                newClient.start();
            }
        });
        Bots_Thread.start();
    }
    
    //Vriskw ta online Bots.
    ArrayList<Bot_Properties> OnlineBots(){
        if(!Bots.isEmpty()){
            for(int j=0; j<Bots.size(); j++){
                if(Bots.get(j).SocketIsClosed()){
                    Bots.remove(j);
                }
            }
            
            ArrayList<Bot_Properties> OnlineBots = new ArrayList();
            for(int i=0; i<Bots.size(); i++){
                if(!Bots.get(i).SocketIsClosed()){
                    OnlineBots.add(Bots.get(i).getCurBot());
                    OnlineBots.get(i).setSSLSocket(null);
                    OnlineBots.get(i).setOos(null);
                }
            }
            return OnlineBots;
        }
        return null;
    }
    
    private SSLSocket CreateSSLsock(KeyManagerFactory serverKeyManager, TrustManagerFactory trustManager, int port){
        SSLServerSocket Ssocket;
        SSLSocket socket;
        try {
            //use keys to create SSLSoket
            SSLContext ssl = SSLContext.getInstance("TLS");
            ssl.init(serverKeyManager.getKeyManagers(), trustManager.getTrustManagers(), SecureRandom.getInstance("SHA1PRNG"));
            Ssocket = (SSLServerSocket)ssl.getServerSocketFactory().createServerSocket(port);
            Ssocket.setNeedClientAuth(true);
            socket = (SSLSocket)Ssocket.accept();
            return socket;
        } catch (NoSuchAlgorithmException | IOException | KeyManagementException ex) {
            return null;
        }
    }
}
